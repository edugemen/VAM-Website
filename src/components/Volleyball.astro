---

---

<div id="volleyball"></div>

<script>
    import * as THREE from "three";

    THREE.ColorManagement.legacyMode = false;

    // function getFresnelMat({ rimHex = 0x0088ff, facingHex = 0x000000 } = {}) {
    function getFresnelMat({ rimHex = 0xeeeeee, facingHex = 0x000000 } = {}) {
        const uniforms = {
            color1: { value: new THREE.Color(rimHex) },
            color2: { value: new THREE.Color(facingHex) },
            fresnelBias: { value: 0.1 },
            fresnelScale: { value: 1.0 },
            fresnelPower: { value: 4.0 },
        };
        const vs = `
  uniform float fresnelBias;
  uniform float fresnelScale;
  uniform float fresnelPower;
  
  varying float vReflectionFactor;
  
  void main() {
    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
  
    vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );
  
    vec3 I = worldPosition.xyz - cameraPosition;
  
    vReflectionFactor = fresnelBias + fresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), fresnelPower );
  
    gl_Position = projectionMatrix * mvPosition;
  }
  `;
        const fs = `
  uniform vec3 color1;
  uniform vec3 color2;
  
  varying float vReflectionFactor;
  
  void main() {
    float f = clamp( vReflectionFactor, 0.0, 1.0 );
    gl_FragColor = vec4(mix(color2, color1, vec3(f)), f);
  }
  `;
        const fresnelMat = new THREE.ShaderMaterial({
            uniforms: uniforms,
            vertexShader: vs,
            fragmentShader: fs,
            transparent: true,
            blending: THREE.AdditiveBlending,
            // wireframe: true,
        });
        return fresnelMat;
    }

    // Create scene
    const scene = new THREE.Scene();

    // Create camera
    const camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000
    );

    if (window.innerWidth < 1024) {
        camera.position.z = 10;
    } else {
        camera.position.z = 5;
    }

    // Create renderer
    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    renderer.outputEncoding = THREE.sRGBEncoding;
    // renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.setSize(window.innerWidth, window.innerHeight);
    // document.body.appendChild(renderer.domElement);

    // Add renderer to DOM
    document.getElementById("volleyball").appendChild(renderer.domElement);

    const volleyGroup = new THREE.Group();
    scene.add(volleyGroup);

    // Create sphere geometry
    const sphereGeometry = new THREE.SphereGeometry(2, 32, 32);

    // Load texture
    const textureLoader = new THREE.TextureLoader();
    const texture = textureLoader.load("volley_sph.jpg");
    texture.encoding = THREE.sRGBEncoding;

    // Create material with texture
    const material = new THREE.MeshStandardMaterial({ map: texture });

    // Create sphere mesh
    const sphere = new THREE.Mesh(sphereGeometry, material);

    // Add sphere to scene
    volleyGroup.add(sphere);

    const fresnelMat = getFresnelMat();
    const glowMesh = new THREE.Mesh(sphereGeometry, fresnelMat);
    glowMesh.scale.setScalar(1.01);
    volleyGroup.add(glowMesh);

    console.log(localStorage.getItem("theme"));

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.1);

    if (localStorage.getItem("theme") == "light") {
        scene.add(ambientLight);
    }

    window.addEventListener("storage", (event) => {
        if (localStorage.getItem("theme") == "light") {
            scene.add(ambientLight);
        } else {
            scene.remove(ambientLight);
        }
    });

    const sunLight = new THREE.DirectionalLight(0xffffff);
    sunLight.position.set(-2, 0.5, 1.5);
    scene.add(sunLight);

    // Animation function
    const animate = () => {
        requestAnimationFrame(animate);

        // Rotate sphere
        // sphere.rotation.x += 0.01;
        sphere.rotation.y += 0.002;

        // Render scene
        renderer.render(scene, camera);
    };

    // Start animation
    animate();
</script>
